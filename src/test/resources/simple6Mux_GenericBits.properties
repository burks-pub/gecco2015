
#------------------------ Multiplexer config -----------------------------------
#Set the problem as Multiplexer
problem=msu.research.gp.simple.multiplexer.Multiplexer

#Set the function set
functionSetSize = 4
functionSet.0 = msu.research.gp.simple.bool.nodes.AND
functionSet.1 = msu.research.gp.simple.bool.nodes.OR
functionSet.2 = msu.research.gp.simple.bool.nodes.NOT
functionSet.3 = msu.research.gp.simple.bool.nodes.IF

#Set the terminal set
terminalSetSize = 6
terminalSet.0 = msu.research.gp.simple.multiplexer.nodes.A_0
terminalSet.1 = msu.research.gp.simple.multiplexer.nodes.A_1
terminalSet.2 = msu.research.gp.simple.bool.nodes.D_0
terminalSet.3 = msu.research.gp.simple.bool.nodes.D_1
terminalSet.4 = msu.research.gp.simple.bool.nodes.D_2
terminalSet.5 = msu.research.gp.simple.bool.nodes.D_3

#Multiplexer parameters
numAddressBits = 2

#------------------------- GP config -------------------------------------------
#Setup the crossover and mutation probabilities
crossProb=0.90
mutProb=0.01

#Setup the max attempts for crossover
maxCrossAttempts=1

#max tries to find unique random individuals on init
maxUniqueRetries = 50000

#Setup pop size & generations
popSize=1000
stopOn=GENERATIONS
numGenerations=500

#Setup the tournament size
tournamentSize=7

#Setup the max depth for the trees
maxDepth=10

minBuildDepth=3
maxBuildDepth=6

#Stop when we find optimal fitness value?
stopOnOptimal=false

#Elitism - equivalent of 10 layers and 3 elites in each layer
numElites = 30

#GP class
gp = msu.research.gp.simple.gp.GP

