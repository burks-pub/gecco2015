seed=1404514792162
#------------------------ Symbolic Regression config ---------------------------
#Set the problem as Multiplexer
problem=msu.research.gp.simple.regression.SymbolicRegression

#Set the function set
functionSetSize = 8
functionSet.0 = msu.research.gp.simple.regression.nodes.ADD
functionSet.1 = msu.research.gp.simple.regression.nodes.SUB
functionSet.2 = msu.research.gp.simple.regression.nodes.MULT
functionSet.3 = msu.research.gp.simple.regression.nodes.DIV
functionSet.4 = msu.research.gp.simple.regression.nodes.SIN
functionSet.5 = msu.research.gp.simple.regression.nodes.COS
functionSet.6 = msu.research.gp.simple.regression.nodes.EXP
functionSet.7 = msu.research.gp.simple.regression.nodes.RLOG

#Set the terminal set
terminalSetSize = 2
terminalSet.0 = msu.research.gp.simple.regression.nodes.X
terminalSet.1 = msu.research.gp.simple.regression.nodes.R

#------------------------- GP config -------------------------------------------
#Setup the crossover and mutation probabilities
crossProb=1.0
mutProb=0.05

#Setup the max attempts for crossover
maxCrossAttempts=1

#max tries to find unique random individuals on init
maxUniqueRetries = 100

#Setup pop size & generations
popSize=400
numGenerations=200

#Setup the tournament size
tournamentSize=7

#Setup the max depth for the trees
maxDepth=17

#Stop when we find optimal fitness value?
stopOnOptimal=false

#Elitism
numElites = 3

#----------------------- layers config -----------------------------------------
#Number of layers
numLayers = 10

#Age gap
ageGap = 10

#The layer scheme to use
layerScheme = msu.research.gp.layers.AlpsLayerScheme

#GP class for handling layers
gp = msu.research.gp.layers.LayeredGP