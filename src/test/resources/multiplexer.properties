#------------------------ Multiplexer config -----------------------------------
#Set the problem as Multiplexer
problem=ec.research.gp.simple.multiplexer.Multiplexer

#Set the function set
functionSetSize = 4
functionSet.0 = ec.research.gp.simple.bool.nodes.AND
functionSet.1 = ec.research.gp.simple.bool.nodes.OR
functionSet.2 = ec.research.gp.simple.bool.nodes.NOT
functionSet.3 = ec.research.gp.simple.bool.nodes.IF

#Set the terminal set
terminalSetSize = 6
terminalSet.0 = ec.research.gp.simple.multiplexer.nodes.A0
terminalSet.1 = ec.research.gp.simple.bool.nodes.D0
terminalSet.2 = ec.research.gp.simple.bool.nodes.D1
terminalSet.3 = ec.research.gp.simple.multiplexer.nodes.A1
terminalSet.4 = ec.research.gp.simple.bool.nodes.D2
terminalSet.5 = ec.research.gp.simple.bool.nodes.D3
terminalSet.6 = ec.research.gp.simple.multiplexer.nodes.A2
terminalSet.7 = ec.research.gp.simple.bool.nodes.D4
terminalSet.8 = ec.research.gp.simple.bool.nodes.D5
terminalSet.9 = ec.research.gp.simple.bool.nodes.D6
terminalSet.10 = ec.research.gp.simple.bool.nodes.D7

#Multiplexer parameters
numAddressBits = 2

#------------------------- GP config -------------------------------------------
#Setup the crossover and mutation probabilities
crossProb=1.0
mutProb=0.05

#Setup the max attempts for crossover
maxCrossAttempts=1

#max tries to find unique random individuals on init
maxUniqueRetries = 100

#Setup pop size & generations
popSize=400
numGenerations=200

#Setup the tournament size
tournamentSize=7

#Setup the max depth for the trees
maxDepth=17

#Stop when we find optimal fitness value?
stopOnOptimal=false

#Elitism
numElites = 3

#----------------------- layers config -----------------------------------------
#Number of layers
numLayers = 10

#Age gap
ageGap = 10

#GP class for handling layers
gp = ec.research.gp.layers.LayeredGP
