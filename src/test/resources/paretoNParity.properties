seed=1403139481095

#------------------------ NParity config -----------------------------------
#Set the problem as NParity
problem=msu.research.gp.simple.parity.NParity

#Set the function set
functionSetSize = 4
functionSet.0 = msu.research.gp.simple.bool.nodes.AND
functionSet.1 = msu.research.gp.simple.bool.nodes.OR
functionSet.2 = msu.research.gp.simple.bool.nodes.NAND
functionSet.3 = msu.research.gp.simple.bool.nodes.NOR

#Set the terminal set
terminalSetSize = 5
terminalSet.0 = msu.research.gp.simple.bool.nodes.D0
terminalSet.1 = msu.research.gp.simple.bool.nodes.D1
terminalSet.2 = msu.research.gp.simple.bool.nodes.D2
terminalSet.3 = msu.research.gp.simple.bool.nodes.D3
terminalSet.4 = msu.research.gp.simple.bool.nodes.D4

#N for the N-Parity problem
n = 2

#------------------------- GP config -------------------------------------------
#Setup the crossover and mutation probabilities
crossProb=0.90
mutProb=0.05

#Setup the max attempts for crossover
maxCrossAttempts=1

#max tries to find unique random individuals on init
maxUniqueRetries = 50000

#Setup pop size & generations
popSize=1000
numGenerations=200

#Setup the tournament size
tournamentSize=7

#Setup the max depth for the trees
maxDepth=10

minBuildDepth=2
maxBuildDepth=4

#Stop when we find optimal fitness value?
stopOnOptimal=true

#GP class
gp = msu.research.gp.pareto.ParetoGP

#---------------------- ParetoGP config --------------------------------
#How many levels do we include in a tag?
tagDepth = 3