numThreads=4

#------------------------ Symbolic Regression config ---------------------------
#Set the problem
problem=msu.research.gp.simple.regression.SymbolicRegression

#Set the function set
functionSetSize = 8
functionSet.0 = msu.research.gp.simple.regression.nodes.ADD
functionSet.1 = msu.research.gp.simple.regression.nodes.SUB
functionSet.2 = msu.research.gp.simple.regression.nodes.MULT
functionSet.3 = msu.research.gp.simple.regression.nodes.DIV
functionSet.4 = msu.research.gp.simple.regression.nodes.SIN
functionSet.5 = msu.research.gp.simple.regression.nodes.COS
functionSet.6 = msu.research.gp.simple.regression.nodes.EXP
functionSet.7 = msu.research.gp.simple.regression.nodes.RLOG

#Set the terminal set
terminalSetSize = 1
terminalSet.0 = msu.research.gp.simple.regression.nodes.X

#------------------------- GP config -------------------------------------------
#Setup the crossover and mutation probabilities
crossProb=0.75
mutProb=0.0

#Setup the max attempts for crossover
maxCrossAttempts=1

#max tries to find unique random individuals on init
maxUniqueRetries = 50000

#Setup pop size & generations
popSize=256
stopOn=EVALUATIONS
numEvaluations=10000000

#Setup the tournament size
tournamentSize=2

#Setup the max depth for the trees
maxDepth=17

minBuildDepth=3
maxBuildDepth=6

#Stop when we find optimal fitness value?
stopOnOptimal=true

#GP class
gp = msu.research.gp.pareto.ParetoGP

#---------------------- ParetoGP config --------------------------------
#How many nodes to we include in a tag?
tagDepth = 2

#Which objectives are we evaluating individuals on?
objectives = DENSITY_FITNESS
doUniqueTagRandom=false

#----------------------- output config ----------------------------------------
statCollectEvals=1000

